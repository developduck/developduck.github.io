- name: Flutter, Dart
  percentage: 8
  description: 
    ul:
      - li: BLoC 패턴을 이용한 아키텍처를 설계하며 Dart Streams를 이용해 비동기 형태로 개발합니다. 
      - li: 환경별로 Flavor(Android)/Scheme(iOS)를 설정하며 각각 환경별 앱이 별도로 설치되도록 관리합니다.
        ul:
          - li: local - 서버와 앱을 동시에 개발할 경우 바로 로컬 서버로 접속하여 테스트를 위한 환경
          - li: mock - 서버가 없이도 데이터 구조가 정의되면 더미 데이터를 생성하여 업무를 진행하기 위한 환경
          - li: develop - 기본적으로 앱을 개발 및 테스트를 위해 구성되는 환경
          - li: staging - 사용자에게 배포되기 전에 운영 환경과 동일한 환경에서 내부 테스트 등을 위한 환경
          - li: production - 실제 사용자에게 배포하기 위한 환경
      - li: 글로벌로 앱을 출시할 경우 다국어 처리 및 배포가 가능합니다.
      - li: Android, iOS, Web으로 빌드가 가능하며 아직 MacOS, Window, Embedded는 빌드해본 경험이 없습니다.
      - li: FlutterFire의 Crashlytics, Remote Config, Cloud Firestore, Storage 등 연동 가능합니다..
      - li: Widget Customize, Component 제작 가능합니다.
      - li: 그 외에 Google Map 연동 경험이 있습니다. 
- name: Android, Kotlin
  percentage: 10
  description: 
    ul:
      - li: Java, Kotlin 모두 사용 고급 수준으로 사용합니다.
      - li: 다양한 디바이스, 해상도 대응에 능숙합니다.
      - li: 주로 MVVM 아키텍처로 설계하며 비동기 형태로 개발합니다.
        ul:
          - li: ReactiveX(RxJava, RxKotlin) 라이브러리를 이용
          - li: Coroutine, Flow, LiveData, DataBinding을 이용
      - li: Dagger 또는 Koin으로 의존성을 주입합니다.
      - li: JUnit5, Mockito를 이용하여 유닛 테스트를 작성하고 실행합니다.
      - li: AndroidX, Retrofit2, Firebase BoM(Bill of Materials), Glide 등의 라이브러리를 사용합니다.
      - li: View Customize, Component 제작 가능합니다.
- name: iOS, Swift
  percentage: 9
  description: 
    ul:
      - li: Swift는 중급으로 사용하며 Objective-C는 초급 수준입니다.
      - li: Multiplatform 프로젝트는 가능하나 적응 시간이 필요합니다.
      - li: SwiftUI + Combine 사용하여 MVVM 아키텍처를 적용합니다.
      - li: DIKit을 이용해 의존성을 주입합니다.
      - li: XCTest로 필요한 부분만 간단하게 유닛 테스트(Given, When. Then)를 진행합니다.
      - li: Alamofire, Firebase, Kingfisher등의 라이브러리를 사용합니다.
      - li: View Customize, Component 제작 가능합니다.
- name: Ionic, AngularJS 
  percentage: 7
  description: 
    ul:
      - li: TypeScript, JavaScript 모두 중급 수준으로 사용합니다.
      - li: MVC 아키텍처를 적용했으며 RxJS를 이용해 비동기 형태로 개발합니다.
      - li: Media Query를 활용해 다양한 해상도를 반응형으로 대응합니다.

- name: API Design
  percentage: 6
  description: 
    ul:
      - li: OpenAPI Specification 준수하여 API 설계 가능
      - li: Swagger, Stoplight 사용 가능(+형상관리)
      - li: OpenAPI Diff 툴 사용하여 변경 내역 문서화 가능
- name: Express, Node.js
  percentage: 9
  description: 
    ul:
      - li: API 서버 개발 가능
      - li: Access Token, Refresh Token을 이용한 인증 체계 구축 경험
      - li: Knex를 이용한 쿼리 설계
      - li: 3 Layer Architecture 사용
- name: Spring Boot, Kotlin
  percentage: 6
  description: 
    ul:
      - li: 간단한 홈페이지 제작 가능합니다.
      - li: API 서버 개발 가능합니다.
- name: Java
  percentage: 9
  description:
    ul:
      - li: 작성 중
- name: Docker
  percentage: 6
  description: 
    ul:
      - li: 간단하게 Dockerfile을 작성하고 이미지로 빌드할 수 있습니다.
      - li: 주로 
- name: AWS 
  percentage: 7
  description: 
    ul:
      - li: Infrastructure as Code
        ul:
          - li: Terraform 사용하여 AWS 인프라 구축
          - li: CloudFormation은 단기간에 적응 가능
      - li: VPC
        ul:
          - li: 기본적인 VPC 설계 가능
          - li: Private/Public 서브넷으로 분리된 가장 기본적인 아키텍처 설계 가능
          - li: Nat Gateway/Internet Gateway를 이용하여 Private/Public 서브넷으로 분리
          - li: 라우팅 테이블 작성 가능
      - li: Load Balancer/Auto Scaling
        ul: 
          - li: 부하분산 및 고가용성으로 설계
          - li: 헬스 체크로 서비스 불가능 상황에 대한 대비하여 설계
      - li: AWS Aurora/ElastiCache
        ul:
          - li: Aurora Serverless (MySQL 엔진) 구축 경험
          - li: EleastiCache (Redis 엔진) 구축 경험
      - li: CodePipeline/CodeBuild/CodeDeploy
        ul:
          - li: CodePipeline으로 Workflow 구현
          - li: CodeBuild로 빌드 및 테스트 자동화
          - li: CodeDeploy로 배포 자동화
- name: Terraform
  percentage: 8
  description: 
    ul:
      - li: Terraform 사용하여 AWS 인프라 구축
- name: Jenkins
  percentage: 6
  description: 
    ul:
      - li: 작성 중
- name: Github Actions
  percentage: 5
  description: 
    ul:
      - li: 브랜치별(ex:main, staging, develop) Push 이벤트를 감지하여 Self-hosted runner 또는 Github Actions에서 제공하는 Virtual Host로 컴퓨팅 서버에 배포되도록 구축 가능합니다.
      - li: 배포 후에는 Incomming WebHook을 이용하여 슬랙과 같은 회사 메신저에 Commit 내용을 공유합니다.
- name: Git
  percentage: 9
  description: 
    ul:
      - li: 브랜치 전략을 수립하고 코드를 관리함 (main, hotfix, develop, release, feature, 상황에 따라 staging 추가)
- name: C/C++
  percentage: 7
  description: 
    ul:
      - li: 'FFmpeg Build(Static/Shared) 가능 : Shell Script로 빌드함'
      - li: 'OpenCV Build(Static/Shared) 가능 : Visual Studio로 빌드함'
      - li: 'Android Native C/C++ 코딩(중급)'
      - li: 'iOS Objective-C 코딩(초급)'
- name: C#
  percentage: 7
  description: 
    ul:
      - li: 윈도우 어플리케이션 개발 가능함
      - li: 윈도우 API 사용 및 활용
      - li: 윈도우 동적(lib)/정적(dll) 라이브러리 개발
- name: Database 
  percentage: 8
  description: 
    ul:
      - li: 기본적인 모델링(정규화) 및 ERD 작성
      - li: 기본적인 SQL 작성(DDL, DML, DCL)
      - li: 간단한 Query 튜닝(실행 계획)
- name: Vue.js, Nuxt
  percentage: 6
  description: 
    ul:
      - li: 다국어 처리
      - li: 반응형 웹페이지 제작 가능
- name: PHP, Laravel 
  percentage: 4
  description: 
    ul:
      - li: 간단한 홈페이지 제작 가능합니다.
      - li: API 서버 개발 가능합니다.
- name: Python, Flask
  percentage: 3
  description: 
    ul:
      - li: 간단한 홈페이지 제작 가능합니다.
      - li: API 서버 개발 가능합니다.
- name: Ruby, Rails
  percentage: 3
  description: 
    ul:
      - li: 간단한 홈페이지 제작 가능합니다.
      - li: API 서버 개발 가능합니다.
- name: FFmpeg
  percentage: 5
  description: 
    ul:
      - li: 정적 라이브러리, 동적 라이브러리 또는 실행 프로그램으로 빌드할 수 있습니다.
      - li: FFmpeg으로 decoding, demultiplexing, multiplexing, encoding 가능합니다.
      - li: FFmpeg으로 동영상 편집 및 화질 변경 등 가능함
      - li: FFmpeg으로 metadata 입력 및 수정 가능함