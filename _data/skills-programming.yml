- name: Flutter, Dart
  percentage: 8
  description: 
    ul:
      - li: BLoC 패턴을 이용한 아키텍처를 설계하며 Dart Streams를 이용해 비동기 형태로 개발합니다. 
      - li: 환경별로 Flavor(Android)/Scheme(iOS)를 설정하며 각각 환경별 앱이 별도로 설치되도록 관리합니다.
        ul:
          - li: local - 서버와 앱을 동시에 개발할 경우 바로 로컬 서버로 접속하여 테스트를 위한 환경
          - li: mock - 서버가 없이도 데이터 구조가 정의되면 더미 데이터를 생성하여 업무를 진행하기 위한 환경
          - li: develop - 기본적으로 앱을 개발 및 테스트를 위해 구성되는 환경
          - li: staging - 사용자에게 배포되기 전에 운영 환경과 동일한 환경에서 내부 테스트 등을 위한 환경
          - li: production - 실제 사용자에게 배포하기 위한 환경
      - li: 글로벌로 앱을 출시할 경우 다국어 처리 및 배포가 가능합니다.
      - li: Android, iOS, Web으로 빌드가 가능하며 아직 MacOS, Window, Embedded는 빌드해본 경험이 없습니다.
      - li: FlutterFire의 Crashlytics, Remote Config, Cloud Firestore, Storage 등 연동 가능합니다.
      - li: Widget Customize, Component 제작 가능합니다.
      - li: 그 외에 Google Map 연동 경험이 있습니다. 
- name: Android, Kotlin
  percentage: 10
  description: 
    ul:
      - li: Java, Kotlin 모두 사용 고급 수준으로 사용합니다.
      - li: 다양한 디바이스, 해상도 대응에 능숙합니다.
      - li: 주로 MVVM 아키텍처로 설계하며 비동기 형태로 개발합니다.
        ul:
          - li: ReactiveX(RxJava, RxKotlin) 라이브러리를 이용
          - li: Coroutine, Flow, LiveData, DataBinding을 이용
      - li: Dagger 또는 Koin으로 의존성을 주입합니다.
      - li: JUnit5, Mockito를 이용하여 유닛 테스트를 작성하고 실행합니다.
      - li: AndroidX, Retrofit2, Firebase BoM(Bill of Materials), Glide 등의 라이브러리를 사용합니다.
      - li: View Customize, Component 제작 가능합니다.
- name: iOS, Swift
  percentage: 9
  description: 
    ul:
      - li: Swift는 중급으로 사용하며 Objective-C는 초급 수준입니다.
      - li: Multiplatform 프로젝트는 가능하나 적응 시간이 필요합니다.
      - li: SwiftUI + Combine 사용하여 MVVM 아키텍처를 적용합니다.
      - li: DIKit을 이용해 의존성을 주입합니다.
      - li: XCTest로 필요한 부분만 간단하게 유닛 테스트(Given, When, Then)를 진행합니다.
      - li: Alamofire, Firebase, Kingfisher등의 라이브러리를 사용합니다.
      - li: View Customize, Component 제작 가능합니다.
- name: Ionic, AngularJS 
  percentage: 7
  description: 
    ul:
      - li: TypeScript, JavaScript 모두 중급 수준으로 사용합니다.
      - li: MVC 아키텍처를 적용했으며 RxJS를 이용해 비동기 형태로 개발합니다.
      - li: Media Query를 활용해 다양한 해상도를 반응형으로 대응합니다.
      - li: JavaScript, CSS 등으로 애니메이션 처리 가능합니다.
- name: API Design
  percentage: 6
  description: 
    ul:
      - li: OpenAPI Specification을 준수하여 API를 설계합니다.
      - li: Swagger, Stoplight 등의 툴을 사용하여 형상관리 및 문서화합니다.
      - li: OpenAPI Diff 툴을 사용하여 변경 내역을 문서화합니다.
- name: Express, Node.js
  percentage: 9
  description: 
    ul:
      - li: API 서버 개발 가능합니다.
      - li: JWT로 Access Token, Refresh Token을 생성하여 사용자 인증 체계를 구축합니다.
      - li: 데이터베이스 쿼리를 직접 작성하고 연동할 수 있습니다.
        ul:
          - li: Knex 라이브러리로 쿼리를 빌드하고 재사용성을 높입니다.
          - li: 여러개의 작업을 하나의 Transaction으로 관리할 수 있습니다.
      - li: Object Relational Mapping을 위한 Sequelize 사용 가능합니다.
      - li: 3 Layer Architecture를 사용합니다.
      - li: Middleware를 사용하여 사용자를 검증하거나 데이터 유효성을 검사합니다.
      - li: Jest로 필요한 부분만 간단하게 유닛 테스트를 진행합니다.
      - li: Winston으로 로그를 남기고 오류 핸들러를 통하여 처리되지 않은 오류를 수집합니다.
- name: Spring Boot, Kotlin
  percentage: 6
  description: 
    ul:
      - li: Java, Kotlin 모두 고급 수준으로 사용합니다.
      - li: API 서버 개발 가능합니다.
      - li: JWT로 Access Token, Refresh Token을 생성하여 사용자 인증 체계를 구축합니다.
      - li: 데이터베이스 쿼리를 직접 작성하고 연동할 수 있으며 MyBatis로 쿼리를 빌드하고 재사용성을 높입니다.
      - li: Object Relational Mapping을 위한 JPA 사용 가능합니다.
      - li: MVC 아키텍처를 주로 사용합니다.
      - li: AOP를 사용하여 사용자를 검증하거나 데이터 유효성을 검사합니다.
# - name: Nginx
#   percentage: 8
#   description:
#     ul:
#       - li: 
#       - li: 
- name: Docker
  percentage: 6
  description: 
    ul:
      - li: 간단하게 Dockerfile을 작성하고 이미지로 빌드할 수 있습니다.
      - li: 개발환경을 구성할 때 주로 사용합니다.
      - li: 간단한 서버의 경우 docker-compose를 이용해서 서버 환경과 동일하게 구성하고 그대로 배포에 사용합니다.
- name: AWS 
  percentage: 7
  description: 
    ul:
      - li: Infrastructure as Code
        ul:
          - li: Terraform 사용하여 AWS 인프라를 구축하고 관리합니다.
          - li: CloudFormation의 경우 적응기간이 필요합니다.
      - li: VPC
        ul:
          - li: 기본적인 VPC 설계 가능합니다.
          - li: Private/Public 서브넷으로 분리된 가장 기본적인 아키텍처 설계 경험이 있습니다.
          - li: Nat Gateway/Internet Gateway를 이용하여 Private/Public 서브넷으로 분리합니다.
          - li: 간단한 라우팅 테이블은 직접 작성 가능합니다.
      - li: Load Balancer/Auto Scaling
        ul: 
          - li: 부하분산 및 고가용성으로 설계합니다.
          - li: 헬스 체크로 서비스 불가능 상황에 대한 대비하여 설계합니다.
      - li: AWS Aurora/ElastiCache
        ul:
          - li: Aurora Serverless (MySQL 엔진) 구축 경험이 있습니다.
          - li: EleastiCache (Redis 엔진) 구축 경험이 있습니다.
      - li: CodePipeline/CodeBuild/CodeDeploy
        ul:
          - li: CodePipeline으로 파이프라인을 구현합니다.
          - li: CodeBuild로 빌드 및 테스트를 자동화합니다.
          - li: CodeDeploy로 배포를 자동화합니다.
- name: Terraform
  percentage: 8
  description: 
    ul:
      - li: Terraform 사용하여 AWS 인프라를 구축하고 관리합니다.
- name: Jenkins
  percentage: 5
  description: 
    ul:
      - li: Github의 Webhook 이벤트를 감지하여 트리거를 걸 수 있습니다.
      - li: 운영 환경과 동일한 환경에 구축하고 빌드를 구성한 경험이 있습니다.
      - li: 배포는 Jenkins에서 ssh로 서버에 연결하여 배포했습니다.
      - li: 빌드/배포 후에는 Incomming Webhook을 이용하여 슬랙과 같은 회사 메신저에 성공 여부를 공유합니다.
- name: Github Actions
  percentage: 6
  description: 
    ul:
      - li: 문서를 참조하여 워크플로우를 실행하는 다양한 이벤트 트리거를 걸 수 있습니다.
      - li: 브랜치(ex:main, staging, develop 등..)별로 분기하여 처리 가능합니다.
      - li: Self-hosted runner 또는 Github Actions에서 제공하는 Virtual Host로 빌드하고 배포되도록 구축 가능합니다.
      - li: 배포 후에는 Incomming WebHook을 이용하여 슬랙과 같은 회사 메신저에 Commit 내용을 공유합니다.
- name: Git
  percentage: 9
  description: 
    ul:
      - li: 브랜치 전략을 수립하고 코드를 관리합니다.
        ul: 
          - li: 브랜치는 유일하게 구분될 수 있는 이슈 번호로 관리하며 다음과 같이 분류합니다.
          - li: master - 완료된 마일스톤 혹은 사용자에게 배포(release)된 코드가 관리되는 브랜치
          - li: hotfix - 긴급히 배포되는 패치를 위해 운영(master)에서 분기해서 바로 운영으로 병합되는 브랜치 
          - li: develop - 개발된 기능(feature)을 공유하고 관리하는 브랜치
          - li: release - 배포(release)를 위해서 개발(develop)에서 분기하는 브랜치
          - li: feature - 기능 개발을 위해 develop에서 분기하는 브랜치
          - li: (Optional) staging - staging 서버의 배포 자동화를 위해 선택적으로 생성하는 브랜치
      - li: 배포 후 장애가 발생할 경우 revert를 통해 작업 내역을 되돌립니다.
- name: C/C++
  percentage: 7
  description: 
    ul:
      - li: FFmpeg Build(Static/Shared) 가능하며 Shell Script로 빌드합니다.
      - li: OpenCV Build(Static/Shared) 가능하며 Visual Studio로 빌드합니다.
      - li: Android NDK로 C/C++ 라이브러리 연동 및 개발 가능합니다.
- name: C#
  percentage: 7
  description: 
    ul:
      - li: 윈도우 API를 활용하여 어플리케이션 개발 가능합니다.
      - li: 윈도우 동적(lib)/정적(dll) 라이브러리 개발 가능합니다.
- name: Relational Database 
  percentage: 9
  description: 
    ul:
      - li: 모델링을 통한 데이터베이스 설계가 가능하며 ERD 및 테이블 정의서를 작성합니다.
      - li: SQL(DML, DDL, DCL, TCL) 모두 능숙하게 사용합니다.
      - li: 실행 계획을 확인하고 인덱스 기반 조회, 임시 테이블 사용 제거 등 간단한 쿼리를 튜닝 가능합니다.
      # - li: 데이터베이스 튜닝
- name: Nuxt, Vue.js
  percentage: 6
  description: 
    ul:
      - li: 간단한 홈페이지 및 반응형 웹페이지 제작 가능합니다.
      - li: 다국어 처리 경험이 있습니다.
- name: Laravel, PHP 
  percentage: 4
  description: 
    ul:
      - li: 간단한 홈페이지 제작 가능합니다.
      - li: API 서버 개발 가능합니다.
- name: Flask, Python
  percentage: 3
  description: 
    ul:
      - li: 간단한 홈페이지 제작 가능합니다.
      - li: API 서버 개발 가능합니다.
- name: Rails, Ruby 
  percentage: 3
  description: 
    ul:
      - li: 간단한 홈페이지 제작 가능합니다.
      - li: API 서버 개발 가능합니다.
- name: FFmpeg
  percentage: 5
  description: 
    ul:
      - li: 정적 라이브러리, 동적 라이브러리 또는 실행 프로그램으로 빌드할 수 있습니다.
      - li: FFmpeg으로 decoding, demultiplexing, multiplexing, encoding 가능합니다.
      - li: FFmpeg으로 동영상 편집 및 화질 변경 등 가능합니다.
      - li: FFmpeg으로 metadata 입력 및 수정 가능합니다.